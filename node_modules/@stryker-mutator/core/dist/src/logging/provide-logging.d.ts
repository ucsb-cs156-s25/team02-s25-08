import { Injector } from 'typed-inject';
import { LoggingSink } from './logging-sink.js';
import { Logger } from '@stryker-mutator/api/logging';
import { coreTokens } from '../di/index.js';
import { LoggingServer, LoggingServerAddress } from './logging-server.js';
import { LoggingBackend } from './logging-backend.js';
import { LoggingClient } from './logging-client.js';
import { LogLevel } from '@stryker-mutator/api/core';
export declare function provideLogging<T extends {
    [coreTokens.loggingSink]: LoggingSink;
}>(injector: Injector<T>): Injector<import("typed-inject").TChildContext<import("typed-inject").TChildContext<import("typed-inject").TChildContext<T, (categoryName?: string) => Logger, "getLogger">, Logger, "logger">, LoggingServer, "loggingServer">>;
export declare namespace provideLogging {
    var inject: readonly ["loggingSink", "$injector"];
}
export declare function provideLoggingBackend(injector: Injector): Promise<Injector<import("typed-inject").TChildContext<import("typed-inject").TChildContext<import("typed-inject").TChildContext<{}, LoggingBackend, "loggingSink">, LoggingServer, "loggingServer">, LoggingServerAddress, "loggingServerAddress">>>;
export declare namespace provideLoggingBackend {
    var inject: readonly ["$injector"];
}
export type LoggingProvider = ReturnType<typeof provideLogging>;
export declare function provideLoggingClient(injector: Injector, loggingServerAddress: LoggingServerAddress, activeLogLevel: LogLevel): Promise<Injector<import("typed-inject").TChildContext<import("typed-inject").TChildContext<import("typed-inject").TChildContext<{}, LoggingServerAddress, "loggingServerAddress">, LogLevel, "loggerActiveLevel">, LoggingClient, "loggingSink">>>;
//# sourceMappingURL=provide-logging.d.ts.map