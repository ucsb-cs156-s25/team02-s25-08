import type { TemplateResult } from 'lit';
import { LitElement, nothing, type PropertyValues } from 'lit';
import type { FileUnderTestModel, MutationTestMetricsResult } from 'mutation-testing-metrics';
import { TestFileModel } from 'mutation-testing-metrics';
interface ModelEntry {
    name: string;
    file: FileUnderTestModel | TestFileModel;
}
export declare class MutationTestReportFilePickerComponent extends LitElement {
    #private;
    static styles: import("lit").CSSResult[];
    rootModel: MutationTestMetricsResult | undefined;
    openPicker: boolean;
    filteredFiles: (ModelEntry & {
        template?: (string | TemplateResult)[];
    })[];
    fileIndex: number;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    willUpdate(changedProperties: PropertyValues<this>): void;
    updated(changedProperties: PropertyValues<this>): void;
    open(): void;
    render(): typeof nothing | TemplateResult<1>;
}
export {};
//# sourceMappingURL=file-picker.component.d.ts.map